services:
  traefik:
    image: traefik:v3.1.4
    command:
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=morten.lundenes@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entryPoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.asDefault=true"
    ports:
      - "80:80" # HTTP
      - "443:443" # HTTPS
    volumes:
      # So that Traefik can listen to the Docker events
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt" # Store certificates
    networks:
      - app-network
    # labels:
    # - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
    # - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
    # - "traefik.http.routers.http-catchall.entrypoints=web"
    # - "traefik.http.routers.http-catchall.middlewares=https-redirect"
    # - "traefik.http.middlewares.test-redirectscheme.redirectscheme.permanent=true"

  frontend:
    image: ${NEXTJS_APP_IMAGE}
    labels:
      # Explicitly tell Traefik to expose this container
      - "traefik.enable=true"
        # The domain the service will respond to
      - "traefik.http.routers.frontend.rule=Host(`stage.techscape.no`) || Host(`www.stage.techscape.no`)" # Use your actual domain
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - traefik.http.middlewares.mywwwredirect.redirectregex.regex=^https://www\.(.*)
      - traefik.http.middlewares.mywwwredirect.redirectregex.replacement=https://$${1}
      - traefik.http.routers.frontend.middlewares=mywwwredirect
    ports:
      - "3000:3000"
    environment:
      BACKEND_URL: http://backend:8080
    networks:
      - app-network
    depends_on:
      - backend

  backend:
    image: ${SPRING_BOOT_APP_IMAGE}
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/dagligvare
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_PROFILES_ACTIVE: prod
    networks:
      - app-network
    depends_on:
      - postgres
    healthcheck:
      test:
        ["CMD", "curl", "-f", "http://localhost:8080/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
networks:
  app-network:
    driver: bridge
volumes:
  postgres_data:
